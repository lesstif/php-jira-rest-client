<?php

namespace JiraRestApi\Test;

use PHPUnit\Framework\TestCase;
use JiraRestApi\JiraException;
use JiraRestApi\Issue\Version;
use JiraRestApi\Project\ProjectService;
use JiraRestApi\Version\VersionService;

class VersionTest extends TestCase
{
    private string $project = 'TEST';

    /**
     * @test
     *
     */
    public function create_version() : string
    {
        $versionName = '2.3.4';

        try {
            $projectService = new ProjectService();
            $project = $projectService->get($this->project);

            $versionService = new VersionService();

            $version = new Version();

            $version->setName($versionName)
                    ->setDescription('Generated by script')
                    ->setReleased(false)
                    ->setUserStartDateAsDateTime(new \DateTime())
                    ->setReleaseDateAsDateTime((new \DateTime())->add(date_interval_create_from_date_string('2 weeks 3 days')))
                    ->setProjectId($project->id);

            $res = $versionService->create($version);

            $this->assertEquals($res->name, $versionName);
        } catch (JiraException $e) {
            $this->fail("Error Occurred! " . $e->getMessage());
        }

        return $versionName;
    }

    /**
     * @test
     * @depends create_version
     *
     */
    public function update_project_version(string $versionName) : string
    {
        $newVersionName = null;
        try {
            $versionService = new VersionService();
            $projectService = new ProjectService();

            $ver = $projectService->getVersion($this->project, $versionName);

            // update version
            $ver->setName($ver->name . ' Updated name')
                ->setDescription($ver->description . ' Updated description')
                ->setReleased(false)
                ->setStartDateAsDateTime(new \DateTime())
                ->setReleaseDateAsDateTime(
                    (new \DateTime())->add(date_interval_create_from_date_string('1 months 3 days'))
                    )
                ;

            $res = $versionService->update($ver);

            $this->assertEquals($res->name, $ver->name);

            $newVersionName = $res->name;
        } catch (JiraException $e) {
            $this->fail("Error Occurred! " . $e->getMessage());
        }

        return $newVersionName;
    }

    /**
     * @test
     * @depends update_project_version
     */
    public function delete_project_version(string $versionName) : string
    {
        try {
            $versionService = new VersionService();
            $projectService = new ProjectService();

            $ver = $projectService->getVersion($this->project, $versionName);

            $res = $versionService->delete($ver);

            $this->assertEquals(true, $res);
        } catch (JiraException $e) {
            $this->fail("Error Occurred! " . $e->getMessage());
        }

        return $versionName;
    }
}
